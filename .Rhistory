face = "bold", size = 12)))
}
# Running the paired t-test
paired_testing <- function(data, var_name, test_type,
plot_diff=FALSE, plt_title=NULL,
remove_outliers=FALSE, x_axis, y_axis) {
pre_name <- paste(var_name, "pre", sep="_")
post_name <- paste(var_name, "post", sep="_")
if(remove_outliers==TRUE) {
data[, "diff_abs"] <- abs(data[, post_name] - data[, pre_name])
data <- outliers_removal(data=data, var="diff_abs")
}
var_pre <- data[, pre_name]
var_post <- data[, post_name]
data$var_diff <- var_post - var_pre
# Running the test
if(test_type == "wilcoxon"){
#Wilcoxon Signed-Rank Test
test <- wilcox.test(var_pre, var_post, paired=TRUE)
}else if(test_type == "sign") {
#Sign Test
test <- signtest(data$var_diff, m=0, conf.level=0.95, exact=FALSE)
} else if (test_type == "ttest") {
#Paired t-Test
test <- t.test(var_pre, var_post,
paired = TRUE, alternative = "two.sided")
} else if(test_type == "mcnemar") {
cross_tab <- table(var_pre, var_post)
print(cross_tab)
test <- mcnemar.test(cross_tab)
}
print(test)
# Visualize distribution of score differences
if(plot_diff == TRUE) {
data$var_diff <- as.integer(data$var_diff)
plot <- plot_func(df=data, var_name="var_diff", var_type="cont",
plot_title=plt_title, plot_type="hist",
x_axis=x_axis, y_axis=y_axis)
return(plot)
}
# return(test)
}
plot_reg <- function(data, feature, dependent,
remove_outliers=FALSE, which_outliers=NULL,
reg_type, vals_remove=NULL,title=NULL,
x_axis=NULL, y_axis=NULL) {
if(is.null(vals_remove) == FALSE) {
data <- data %>% filter(!.data[[dependent]] %in% vals_remove)
}
if(remove_outliers == TRUE) {
if(which_outliers=="dependent"){
data <- outliers_removal(data=data, var=dependent)
}else if(which_outliers=="feature"){
data <- outliers_removal(data=data, var=feature)
}else if(which_outliers=="all"){
temp <- outliers_removal(data=data, var=feature)
data <- outliers_removal(data=data, var=dependent)
}
}
if(reg_type == "linear") {
plot <- ggplot(data,
aes(x=.data[[feature]], y=.data[[dependent]])) +
geom_point(color='blue') +
geom_smooth(color='red', method = "lm", se = TRUE) +
theme_classic()
} else if(reg_type == "logistic") {
plot <- ggplot(data,
aes(x=.data[[feature]], y=.data[[dependent]])) +
geom_jitter(width = 0.05, height = 0.05) +
#geom_point(color='blue', alpha=.5) +
geom_smooth(method = "glm", color='red',
method.args= list(binomial(link = 'logit')), se=FALSE)
theme_classic()
}else if(reg_type == "poisson") {
plot <- ggplot(data,
aes(x=.data[[feature]], y=.data[[dependent]])) +
#geom_point(color='blue', alpha=.5) +
geom_jitter(width = 0.05, height = 0.05) +
geom_smooth(method = "glm", color='red',
method.args= list(family="poisson"), se=TRUE)+
theme_classic()
}
plot <- plot + labs(title=title, y=y_axis)
return(plot)
}
ind_vars <- c("PV_Size_kWp",	"Customers",	"CAPEX_USD")
community_reg <- function(df, col_name, dep, customer_type,
title, var_type,
calc_diff=FALSE, diff_type=NULL,
to_remove=NULL, exclude_outliers = FALSE,
outliers=NULL, y_axis=NULL) {
if (calc_diff == TRUE) {
pre_name <- paste(col_name, "pre", sep="_")
post_name <- paste(col_name, "post", sep="_")
if(diff_type == "direction"){
df$col_reg <- ifelse(df[, post_name] > df[, pre_name], 1,
ifelse((df[, post_name] < df[, pre_name]), -1, 0))
}else if(diff_type == "magnitude") {
df$col_reg <- df[, post_name] - df[, pre_name]
}
names(df)[names(df) == "community_post"] <- "community"
} else {
df$col_reg <- df[, col_name]
}
if(var_type == "categorical") {
data <- rownames_to_column(as.data.frame.matrix(
prop.table(table(
df[, "community"],
df[, "col_reg"]),
margin = 1)),
var = "community")
community_data <- merge(x=projects, y=data, by="community")
community_data$target <- as.integer(community_data[, dep]*community_data[, customer_type])
} else if(var_type == "ratio") {
data <- as.data.frame(rowsum(df[, "col_reg"],
df[, "community"], na.rm = TRUE))
data$community <- rownames(data)
community_data <- merge(x=projects, y=data, by="community")
names(community_data)[names(community_data) == "V1"] <- "target"
}
if(is.null(to_remove) == FALSE) {
#community_data <- community_data[!grepl(to_remove,data$target),]
community_data <- community_data %>% filter(!.data[["target"]] %in% to_remove)
}
print(community_data)
target_dist_data <- outliers_removal(data=community_data, var="target")
dist <- plot_func(df=target_dist_data, var_name="target", var_type="cont",
plot_title="Dependent Variable Boxplot", plot_type="boxplot",
char_remove=NULL,
remove_outliers = FALSE,
x_axis=NULL, y_axis=NULL)
lst <- list(dist)
for(ind in ind_vars) {
print(ind)
if(exclude_outliers == TRUE) {
community_data <- outliers_removal(data=community_data, var=ind)
}
p <- plot_reg(data=community_data, feature=ind,
dependent="target", reg_type="linear",
# remove_outliers = exclude_outliers,
# which_outliers = outliers,
y_axis=y_axis)
lst <- append(lst, list(p))
pearson_test <- cor.test(community_data[, "target"],
community_data[,ind],
method="pearson")
print(pearson_test)
lm <- lm(community_data[,"target"] ~ community_data[,ind])
details <- summary(lm)
print(details)
print(confint(lm, level=0.95))
}
plot <- ggarrange(plotlist = lst,
ncol = 2, nrow = 2,
common.legend = TRUE,
legend="right")
annotate_figure(plot, top = text_grob(title,
color = "black", face = "bold", size = 12))
}
consumption_reg <- function(df, dep, ind, title, reg_type,
calc_diff=FALSE, diff_type=NULL,
exclude_outliers = FALSE,
outliers=NULL, to_remove=NULL,
x_axis=NULL, y_axis=NULL,
#normalize=FALSE,
threshold=NULL,
threshold_bound=NULL,
log_direction=NULL) {
if (calc_diff == TRUE) {
pre_name <- paste(dep, "pre", sep="_")
post_name <- paste(dep, "post", sep="_")
if(diff_type == "direction"){
df$col_reg <- ifelse(df[, post_name] > df[, pre_name], 1,
ifelse((df[, post_name] < df[, pre_name]), -1, 0))
}else if(diff_type == "magnitude") {
df$col_reg <- df[, post_name] - df[, pre_name]
}
} else {
df$col_reg <- df[, dep]
}
if(is.null(threshold) == FALSE) {
if(threshold_bound == "lower"){
df <- df %>% filter(col_reg < threshold)
}else if(threshold_bound == "higher"){
df <- df %>% filter(col_reg > threshold)
}
}
# if(normalize==TRUE) {
#   mu <- mean(df$col_reg, na.rm = TRUE)
#   std <- sd(df$col_reg, na.rm = TRUE)
#   df$col_reg <- (df$col_reg - mu) / std
# }
print(dim(df))
print(head(df[, c(ind, "col_reg")]))
if(reg_type == "linear") {
model <- lm(df$col_reg ~ df[, ind])
print(summary(model))
print(confint(model, level=0.95))
p <- plot_reg(data=df, feature=ind,
dependent="col_reg", reg_type="linear",
remove_outliers=exclude_outliers,
which_outliers = outliers,
vals_remove=to_remove,
title=title, x_axi=x_axis, y_axis=y_axis)
test <- cor.test(df$col_reg, df[, ind],
method="pearson")
print(test)
} else if(reg_type == "logistic") {
#if(calc_diff == TRUE) {
if(log_direction == 1) {
df <- df %>% filter(col_reg >= 0)
}else if(log_direction == -1) {
df <- df %>% filter(col_reg <= 0)
df$col_reg <- ifelse(df$col_reg == -1, 1, 0)
}
model <- glm(df$col_reg ~ df[, ind],
family="binomial")
print(summary(model))
print(confint(model, level=0.95))
p <- plot_reg(data=df, feature=ind,
dependent="col_reg", reg_type="logistic",
remove_outliers=exclude_outliers,
which_outliers = outliers,
vals_remove=to_remove,
title=title, x_axi=x_axis, y_axis=y_axis)
test <- wald.test(Sigma = vcov(model),
b = coef(model), Terms = 1)
print(test)
}else if(reg_type == "poisson") {
model <- glm(df$col_reg ~ df[, ind],
family="poisson")
print(summary(model))
print(confint(model, level=0.95))
p <- plot_reg(data=df, feature=ind,
dependent="col_reg", reg_type="poisson",
remove_outliers=exclude_outliers,
which_outliers = outliers,
vals_remove=to_remove,
title=title, x_axi=x_axis, y_axis=y_axis)
test <- wald.test(Sigma = vcov(model),
b = coef(model), Terms = 1)
print(test)
}
return(p)
}
consumption_reg(df = post_enc, reg_type ="logistic",
dep= "school_performance_change",
ind="avg_mon_consumption_period",
#calc_diff=FALSE, diff_type = "direction",
x_axis="Avg. Monthly Energy Consumption Cumulative (kwH)",
y_axis="School Performance Change",
log_direction = 1,
exclude_outliers = TRUE, outliers = "feature",
title="Individual Directional Change vs Consumption")
consumption_reg(df = post_enc, reg_type ="logistic",
dep= "school_performance_change",
ind="avg_mon_consumption_cum",
#calc_diff=FALSE, diff_type = "direction",
x_axis="Avg. Monthly Energy Consumption Cumulative (kwH)",
y_axis="Households - School Performance Change",
log_direction = 1,
exclude_outliers = TRUE, outliers = "feature",
title="Individual Directional Change vs Consumption")
consumption_reg(df = ci_enc, reg_type ="logistic",
dep= "school_performance",
ind="avg_mon_consumption_cum",
#calc_diff=FALSE, diff_type = "direction",
x_axis="Avg. Monthly Energy Consumption Cumulative (kwH)",
y_axis="Households - School Performance Change",
log_direction = 1,
exclude_outliers = TRUE, outliers = "feature",
title="Individual Directional Change vs Consumption")
# Undesired Effect
schools <- ci_enc %>% filter(business_type = 3)
# Undesired Effect
schools <- ci_enc %>% filter(business_type == 3)
consumption_reg(df = schools, reg_type ="logistic",
dep= "school_performance",
ind="avg_mon_consumption_cum",
#calc_diff=FALSE, diff_type = "direction",
x_axis="Avg. Monthly Energy Consumption Cumulative (kwH)",
y_axis="Schools - School Performance Change",
log_direction = 1,
exclude_outliers = TRUE, outliers = "feature",
title="Individual Directional Change vs Consumption")
schools_clean <- ci_clean %>% filter(business_type = "school")
schools_clean <- ci_clean %>% filter(business_type == "school")
plot_func(df=schools_clean, var_name="school_performance",
var_type="non_cont", lgd = "Change",
plot_title="Schools - Academic Performance",
plot_type="pie")
## Have you seen a change in overall school performance?
schools_enc <- ci_enc %>% filter(business_type == 3)
community_reg(df=schools_enc,
col_name="school_performance", dep="1", var_type="categorical",
exclude_outliers = TRUE, outliers = "feature",
customer_type="ci", y_axis= "C&I",
title="Schools - Increase in Academic Performace by Community")
# How safe do you feel outside your home when it is dark?
# Unpaired
compare_pre_post(df_pre=initial_pre, df_post=post_clean,
var_name="feel_safe_dark", var_type="non_cont",
subplot_type="bar_simple", lgd_title = "Scores",
title="Unpaired: Feeling Safe When Dark")
# Paired
compare_paired(data=paired_clean,
var_name="feel_safe_dark",
lgd_title="Score",
plot_title="Paired: Feeling Safe When Dark")
---
title: "Renewvia - Survey Impact Analysis"
# Importing libraries
options(warn=-1)
library(ggplot2)
library(dplyr)
library(lessR)
library(tidyr)
library(ggpubr)
library(exact2x2)
library(stringr)
library(epiDisplay)
library(tibble)
library(ggExtra)
library(vtree)
library(CGPfunctions)
library(psych)
library(nonpar)
library(scales)
library(tidyverse)
library(ggrepel)
library(data.table)
library(forcats)
library(glue)
library(aod)
library(caret)
library(corrplot)
## Locading the project& consumption data
consumption_period <- read.csv("consumption_period.csv")
consumption_all <- read.csv("consumption_cumulative.csv")
customer_info <- read.csv("customers_info.csv")
tmp <- merge(customer_info, consumption_period,
by.x = 'customerAccountNumber',
by.y = 'Account.Number')
temp <- merge(tmp, consumption_all,
by.x = 'customerAccountNumber',
by.y = 'Customer.Account.Number')
# temp_group <- temp %>%
#                     group_by(projectName) %>%
#                     summarise(consumption = sum(Energy.Consumption, na.rm=TRUE))
projects <- read.csv("project_data.csv")
# projects <- merge(projects, temp_group, by.x="project_name", by.y="projectName")
## Intial Survey
initial <- read.csv("data_cleaning/datasets_clean/initial_clean.csv",
na.strings=c("","NA"))
initial_clean <- merge(initial, customer_info,
by.x = 'renewvia_id',
by.y = 'customerAccountNumber') %>%
filter(tariff == "Residential")
# Pre-connection
initial_pre <- initial_clean %>%
filter(status == "pre_connection")
# Post-connection
initial_post <- initial_clean %>%
filter(status == "post_connection")
## Household Post-Survey
post <- read.csv("data_cleaning/datasets_clean/post_clean.csv",
na.strings=c("","NA"))
post_clean <- merge(post, temp,
by.x = 'renewvia_id',
by.y = 'customerAccountNumber')%>%
filter(tariff == "Residential")
## Pairing pre and post responses
paired_clean <- merge(initial_pre, post_clean,
suffix = c("_pre", "_post"),
by= 'renewvia_id')
## Commercial & Insitution Post-Survey
ci <- read.csv("data_cleaning/datasets_clean/ci_post_clean.csv",
na.strings=c("","NA"))
ci_clean <- merge(ci, temp,
by.x = 'renewvia_id',
by.y = 'customerAccountNumber')
# head(ci_clean)
## Locading the encoded data sets
# Intial Survey
initial_enc <- read.csv("data_cleaning/datasets_encoded/initial_encoded.csv",
na.strings=c("","NA"))
initial_enc <- merge(initial_enc, customer_info,
by.x = 'renewvia_id',
by.y = 'customerAccountNumber') %>%
filter(tariff == "Residential")
# Pre-connection
initial_pre_enc <- initial_enc %>%
filter(status == 1)
# Pre-connection
initial_post_enc <- initial_enc %>%
filter(status == 2)
# Household Post-Survey
post <- read.csv("data_cleaning/datasets_encoded/post_encoded.csv",
na.strings=c("","NA"))
post_enc <- merge(post, temp,
by.x = 'renewvia_id',
by.y = 'customerAccountNumber')  %>%
filter(tariff == "Residential")
paired_enc <- merge(initial_pre_enc, post_enc,
suffix = c("_pre", "_post"),
by= 'renewvia_id')
# Commercial & Insitution Post-Survey
ci <- read.csv("data_cleaning/datasets_encoded/ci_post_encoded.csv",
na.strings=c("","NA"))
ci_enc <- merge(ci, temp,
by.x = 'renewvia_id',
by.y = 'customerAccountNumber')
outliers_removal <- function(data, var) {
quartiles <- quantile(data[, var],
probs=c(.25, .75), na.rm = TRUE)
IQR <- IQR(data[, var], na.rm = TRUE)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
data <- subset(data,
data[, var] > Lower &
data[, var] < Upper)
return(data)
}
get_stats <- function(data_source, var_name,
remove_outliers = FALSE,
exclude_zeros = FALSE) {
if (remove_outliers == TRUE) {
data <- outliers_removal(data=data_source, var=var_name)
}
var <- data[, var_name]
if (exclude_zeros == TRUE) {
print("Removing Zeros")
var <- var[var != 0]
}
stats <- t(describe(var, IQR=TRUE, quant=c(.1,.25,.5,.75,.90),))
print(t.test(var, conf.level = 0.95))
print(stats)
}
# Remove y-axis if deemed redundant
remove_y <- theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank()
)
# Remove x-axis if deemed redundant
remove_x <- theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank()
)
# For pie and bar charts
plot_func <- function(df, var_name, var_type,
plot_title, lgd, plot_type,
char_remove=NULL,
remove_outliers = FALSE,
x_axis=NULL, y_axis=NULL) {
if(is.null(char_remove) == FALSE) {
df <- df %>% filter(!.data[[var_name]] %in% char_remove)
}
if(remove_outliers == TRUE) {
df <- outliers_removal(data=df, var=var_name)
}
if(var_type == "non_cont") {
var <- df[, var_name]
var <- var[var != ""]
data <- as.data.frame(t(table(var)))[,2:3]
setnames(data,
old = c('var','Freq'),
new = c('labels','counts'))
# print(data)
data_tab <- data %>% mutate(csum = rev(cumsum(rev(counts))),
pos = counts/2 + lead(csum, 1),
pos = if_else(is.na(pos), counts/2, pos),
percentage = counts/sum(counts))
data_tab$labels <- as.factor(data_tab$labels)
if (plot_type == 'pie') {
plot <- data_tab %>% ggplot(aes(x = "", y = counts,
fill = labels)) +
geom_col(width = 1, color = 1) +
geom_label_repel(
aes(y = pos,
label = glue("{counts} ({percent(percentage)})"),
fill = labels),
show.legend = FALSE) +
labs(fill = lgd, title=plot_title) +
coord_polar(theta = "y") +
theme_void() +
theme(legend.text=element_text(size=6))
} else if (plot_type == "bar_simple") {
plot <- data %>% ggplot(aes(y=counts,
x=reorder(labels, counts),
fill=labels)) +
geom_col(width = 0.7) +
geom_text(aes(label=counts), vjust=-0.3, size=3)+
labs(fill = lgd, title=plot_title) +
coord_flip() +
theme(legend.text=element_text(size=6))
} else if(plot_type == "bar_stack"){
plot <- data_tab %>% ggplot(aes(x = "", y = counts,
fill = labels)) +
geom_col(width = 1, color = 1) +
geom_label_repel(
aes(y = pos,
label = glue("{counts} ({percent(percentage)})"),
fill = labels),
show.legend = FALSE) +
labs(fill = lgd, title=plot_title) +
# coord_polar(theta = "y") +
theme_void() +
theme(legend.text=element_text(size=6))
}
else if (plot_type == "bar_discrete") {
