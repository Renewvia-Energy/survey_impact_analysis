max(initial_clean$age)
# hist(age_initial)
# age_initial
# Gender
# Country
# Settlement
# Age
str_replace_all(initial_clean$age, c("00" = "", "000" = "",
"years" = "", "_hours" = ""))
initial_clean$age = as.numeric(initial_clean$age)
max(initial_clean$age)
# hist(age_initial)
# Gender
# Country
# Settlement
# Age
initial_clean$age = str_replace_all(initial_clean$age, c("00" = "", "000" = "",
"years" = "", "_hours" = ""))
initial_clean$age = as.numeric(initial_clean$age)
max(initial_clean$age)
# hist(age_initial)
# Gender
# Country
# Settlement
View(initial_clean)
# Age
initial_clean$age = str_replace_all(initial_clean$age, c("00" = "", "000" = "",
"years" = "", "_hours" = ""))
initial_clean$age = as.numeric(initial_clean$age)
max(filter(initial_clean$age < 100))
# Age
initial_clean$age = str_replace_all(initial_clean$age, c("00" = "", "000" = "",
"years" = "", "_hours" = ""))
initial_clean$age = as.numeric(initial_clean$age)
age = (initial_clean %>% filter(age < 100))$age
max(age)
# hist(age_initial)
# Gender
# Country
# Settlement
# Age
initial_clean$age = str_replace_all(initial_clean$age, c("00" = "", "000" = "",
"years" = "", "_hours" = ""))
initial_clean$age = as.numeric(initial_clean$age)
age = (initial_clean %>% filter(age < 100))$age
# max(age)
hist(age_initial)
# Gender
# Country
# Settlement
# Age
initial_clean$age = str_replace_all(initial_clean$age, c("00" = "", "000" = "",
"years" = "", "_hours" = ""))
initial_clean$age = as.numeric(initial_clean$age)
age = (initial_clean %>% filter(age < 100))$age
# max(age)
hist(age)
# Gender
# Country
# Settlement
# tinytex::install_tinytex()
library(dataMaid)
library(ggplot2)
library(dplyr)
library(lessR)
library(tidyr)
library(ggpubr)
library(exact2x2)
library(stringr)
## Locading the cleaned data sets
# Intial Survey
initial_clean <- read.csv("data_cleaning/datasets_clean/initial_clean.csv")
head(initial_clean)
# Household Post-Survey
hs_post_clean <- read.csv("data_cleaning/datasets_clean/hs_post_clean.csv")
head(hs_post_clean)
# Commercial & Insitution Post-Survey
ci_post_clean <- read.csv("data_cleaning/datasets_clean/ci_post_clean.csv")
head(ci_post_clean)
# Age
# initial_clean$age = str_replace_all(initial_clean$age, c("00" = "", "000" = "",
#                                     "years" = "", "_hours" = ""))
initial_clean$age = as.numeric(initial_clean$age)
age_initial = (initial_clean %>% filter(age < 100))$age
hist(age_initial)
# Gender
# Country
# Settlement
View(initial_clean)
## Locading the cleaned data sets
# Intial Survey
initial_clean <- read.csv("data_cleaning/datasets_clean/initial_clean.csv")
head(initial_clean)
initial_clean_id <- initial_clean %>%
filter(renewvia_id != "") %>%
filter(renewvia_id != "no_meter")%>%
filter(status != "pre_connection")
hs_post_clean_id <- hs_post_clean %>%
filter(renewvia_id != "") %>%
filter(renewvia_id != "no_meter")
clean_paired <- merge(initial_clean_id, hs_post_clean_id,
suffix = c("_pre", "_post"),
by= 'renewvia_id')
head(clean_paired)
initial_clean_id <- initial_clean %>%
filter(renewvia_id != "") %>%
filter(renewvia_id != "no_meter")%>%
filter(status == "pre_connection")
hs_post_clean_id <- hs_post_clean %>%
filter(renewvia_id != "") %>%
filter(renewvia_id != "no_meter")
clean_paired <- merge(initial_clean_id, hs_post_clean_id,
suffix = c("_pre", "_post"),
by= 'renewvia_id')
head(clean_paired)
View(clean_paired)
# Age
clean_paired$age_pre = as.numeric(initial_clean$age_pre)
# Age
clean_paired$age_pre = as.numeric(clean_paired$age_pre)
clean_paired$age_post = as.numeric(clean_paired$age_post)
age_pre <- (clean_paired$age_pre %>% filter(age_pre < 100))
# Age
clean_paired$age_pre = as.numeric(clean_paired$age_pre)
clean_paired$age_post = as.numeric(clean_paired$age_post)
age_pre <- (clean_paired %>% filter(age_pre < 100))$age_pre
age_post <- (clean_paired %>% filter(age_post < 100))$age_post
b <- min(c(age_pre,age_post)) # Set the minimum for the breakpoints
e <- max(c(age_pre,age_post)) # Set the maximum for the breakpoints
ax <- pretty(b:e, n = 12) # Make a neat vector for the breakpoints
hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hgB <- hist(age_post, breaks = ax, plot = FALSE) # Save 2nd histogram data
plot(hgA, col = c1) # Plot 1st histogram using a transparent color
# Coloring
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
# Age
clean_paired$age_pre = as.numeric(clean_paired$age_pre)
clean_paired$age_post = as.numeric(clean_paired$age_post)
age_pre <- (clean_paired %>% filter(age_pre < 100))$age_pre
age_post <- (clean_paired %>% filter(age_post < 100))$age_post
b <- min(c(age_pre,age_post)) # Set the minimum for the breakpoints
e <- max(c(age_pre,age_post)) # Set the maximum for the breakpoints
ax <- pretty(b:e, n = 12) # Make a neat vector for the breakpoints
hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hgB <- hist(age_post, breaks = ax, plot = FALSE) # Save 2nd histogram data
plot(hgA, col = c1) # Plot 1st histogram using a transparent color
plot(hgB, col = c2, add = TRUE) # Add 2nd histogram using different color
# Gender
# Country
# Settlement
# Coloring
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
# c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
# Age
# clean_paired$age_pre = as.numeric(clean_paired$age_pre)
clean_paired$age_post = as.numeric(clean_paired$age_post)
# age_pre <- (clean_paired %>% filter(age_pre < 100))$age_pre
age_post <- (clean_paired %>% filter(age_post < 100))$age_post
# b <- min(c(age_pre,age_post)) # Set the minimum for the breakpoints
# e <- max(c(age_pre,age_post)) # Set the maximum for the breakpoints
# ax <- pretty(b:e, n = 12) # Make a neat vector for the breakpoints
# hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hist(age_post, breaks = ax, plot = FALSE) # Save 2nd histogram data
# plot(hgA, col = c1) # Plot 1st histogram using a transparent color
# plot(hgB, col = c2, add = TRUE) # Add 2nd histogram using different color
# Gender
# Country
# Settlement
# Coloring
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
# c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
# Age
# clean_paired$age_pre = as.numeric(clean_paired$age_pre)
clean_paired$age_post = as.numeric(clean_paired$age_post)
# age_pre <- (clean_paired %>% filter(age_pre < 100))$age_pre
age_post <- (clean_paired %>% filter(age_post < 100))$age_post
# b <- min(c(age_pre,age_post)) # Set the minimum for the breakpoints
# e <- max(c(age_pre,age_post)) # Set the maximum for the breakpoints
# ax <- pretty(b:e, n = 12) # Make a neat vector for the breakpoints
# hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hist(age_post) # Save 2nd histogram data
# plot(hgA, col = c1) # Plot 1st histogram using a transparent color
# plot(hgB, col = c2, add = TRUE) # Add 2nd histogram using different color
# Gender
# Country
# Settlement
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre <- hs_pre %>% filter(age < 100)
# hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hist(hs_pre$age_post) # Save 2nd histogram data
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre <- hs_pre %>% filter(age < 100)
# hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hist(hs_pre$age) # Save 2nd histogram data
pie(hs_pre$gender, main = "Piechart", radius = 1, labels = names(hs_pre$gender))
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
hs_pre <- hs_pre %>% filter(age < 100)
# hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hist(hs_pre$age) # Save 2nd histogram data
pie(hs_pre$gender, main = "Piechart", radius = 1, labels = names(hs_pre$gender))
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
hs_pre <- hs_pre %>% filter(age < 100)
# hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hist(hs_pre$age) # Save 2nd histogram data
gender_table <- table(hs_pre$gender)
labels <- paste(names(gender_table), "\n", mytable, sep="")
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
hs_pre <- hs_pre %>% filter(age < 100)
# hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hist(hs_pre$age) # Save 2nd histogram data
gender_table <- table(hs_pre$gender)
labels <- paste(names(gender_table), "\n", gender_table, sep="")
pie(mytable, labels = labels,
main="Respondent - Breakdown by Gender")
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
hs_pre <- hs_pre %>% filter(age < 100)
# hgA <- hist(age_pre, breaks = ax, plot = FALSE) # Save first histogram data
hist(hs_pre$age) # Save 2nd histogram data
gender_table <- table(hs_pre$gender)
labels <- paste(names(gender_table), "\n", gender_table, sep="")
pie(gender_table, labels = labels,
main="Respondent - Breakdown by Gender")
# plot(hgA, col = c1) # Plot 1st histogram using a transparent color
# plot(hgB, col = c2, add = TRUE) # Add 2nd histogram using different color
# Gender
# Country
# Settlement
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# Age
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
hs_pre <- hs_pre %>% filter(age < 100)
age_hist <- hist(hs_pre$age, ) # Save histogram data
# Pie Chart
gender_table <- table(hs_pre$gender)
labels <- paste(names(gender_table), "\n", gender_table, sep="")
gender_pie <- pie(gender_table, labels = labels)
ggarrange(age_hist, gender_pie,
labels = c("Age", "Gender"),
ncol = 2, nrow = 2)
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# Age
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
hs_pre <- hs_pre %>% filter(age < 100)
age_hist <- hist(hs_pre$age) # Save histogram data
# Pie Chart
gender_table <- table(hs_pre$gender)
labels <- paste(names(gender_table), "\n", gender_table, sep="")
gender_pie <- pie(gender_table, labels = labels)
ggarrange(age_hist, gender_pie,
labels = c("Age", "Gender"),
ncol = 1, nrow = 2)
# tinytex::install_tinytex()
library(dataMaid)
library(ggplot2)
library(dplyr)
library(lessR)
library(tidyr)
library(ggpubr)
library(exact2x2)
library(stringr)
## Locading the cleaned data sets
# Intial Survey
initial_clean <- read.csv("data_cleaning/datasets_clean/initial_clean.csv")
head(initial_clean)
# Household Post-Survey
hs_post_clean <- read.csv("data_cleaning/datasets_clean/hs_post_clean.csv")
head(hs_post_clean)
# Commercial & Insitution Post-Survey
ci_post_clean <- read.csv("data_cleaning/datasets_clean/ci_post_clean.csv")
head(ci_post_clean)
pre_connect <- initial_clean %>%
filter(renewvia_id != "") %>%
filter(renewvia_id != "no_meter")%>%
filter(status == "pre_connection")
post_connect <- hs_post_clean %>%
filter(renewvia_id != "") %>%
filter(renewvia_id != "no_meter")
clean_paired <- merge(pre_connect, hs_post_clean_id,
suffix = c("_pre", "_post"),
by= 'renewvia_id')
head(clean_paired)
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# Age
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
hs_pre <- hs_pre %>% filter(age < 100)
age_hist <- hist(hs_pre$age) # Save histogram data
# Pie Chart
gender_table <- table(hs_pre$gender)
labels <- paste(names(gender_table), "\n", gender_table, sep="")
gender_pie <- pie(gender_table, labels = labels)
ggarrange(age_hist, gender_pie,
labels = c("Age", "Gender"),
ncol = 2, nrow = 1)
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# tinytex::install_tinytex()
library(dataMaid)
library(ggplot2)
library(dplyr)
library(lessR)
library(tidyr)
library(ggpubr)
library(exact2x2)
library(stringr)
## Locading the cleaned data sets
# Intial Survey
initial_clean <- read.csv("data_cleaning/datasets_clean/initial_clean.csv")
head(initial_clean)
# Household Post-Survey
hs_post_clean <- read.csv("data_cleaning/datasets_clean/hs_post_clean.csv")
head(hs_post_clean)
# Commercial & Insitution Post-Survey
ci_post_clean <- read.csv("data_cleaning/datasets_clean/ci_post_clean.csv")
head(ci_post_clean)
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# Age
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
hs_pre <- hs_pre %>% filter(age < 100)
age_hist <- ggboxplot(hs_pre$age) # Save histogram data
# Pie Chart
# Data transformation
pie_data <- hs_pre %>%
group_by(gender) %>% # Variable to be transformed
count() %>%
ungroup() %>%
mutate(perc = n / sum(n)) %>%
arrange(perc) %>%
mutate(labels = scales::percent(perc))
gender_pie <- ggplot(pie_data,
aes(x = "", y = perc, fill = answer)) +
geom_col() +
geom_text(aes(label = labels),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y")
ggarrange(age_hist, gender_pie,
labels = c("Age", "Gender"),
ncol = 2, nrow = 1)
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# Age
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
hs_pre <- hs_pre %>% filter(age < 100)
age_hist <- ggboxplot(hs_pre$age) # Save histogram data
# Pie Chart
# Data transformation
pie_data <- hs_pre %>%
group_by(gender) %>% # Variable to be transformed
count() %>%
ungroup() %>%
mutate(perc = "n" / sum("n")) %>%
arrange(perc) %>%
mutate(labels = scales::percent(perc))
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# Transforming the vvariables
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
# Age
hs_pre <- hs_pre %>% filter(age < 100)
age_hist <- ggboxplot(hs_pre$age) # Save histogram data
# Pie Chart
# Data transformation
pie_data <- hs_pre %>%
group_by(gender) %>% # Variable to be transformed
count() %>%
ungroup() %>%
mutate(perc = n / sum(n)) %>%
arrange(perc) %>%
mutate(labels = scales::percent(perc))
pie_data
# gender_pie <- ggplot(pie_data, aes(x = "", y = perc, fill = answer)) +
#                   geom_col() +
#                   geom_text(aes(label = labels),
#                             position = position_stack(vjust = 0.5)) +
#                   coord_polar(theta = "y")
# ggarrange(age_hist, gender_pie,
#           labels = c("Age", "Gender"),
#           ncol = 2, nrow = 1)
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# Transforming the vvariables
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
# Age
hs_pre <- hs_pre %>% filter(age < 100)
age_hist <- ggboxplot(hs_pre$age) # Save histogram data
# Pie Chart
# Data transformation
pie_data <- hs_pre %>%
group_by(gender) %>% # Variable to be transformed
count() %>%
ungroup() %>%
mutate(perc = n / sum(n)) %>%
arrange(perc) %>%
mutate(labels = scales::percent(perc))
gender_pie <- ggplot(pie_data, aes(x = "", y = perc, fill = gender)) +
geom_col() +
geom_text(aes(label = labels),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y")
# ggarrange(age_hist, gender_pie,
#           labels = c("Age", "Gender"),
#           ncol = 2, nrow = 1)
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# Transforming the vvariables
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
# Age
hs_pre <- hs_pre %>% filter(age < 100)
age_hist <- ggboxplot(hs_pre$age) # Save histogram data
# Pie Chart
# Data transformation
pie_data <- hs_pre %>%
group_by(gender) %>% # Variable to be transformed
count() %>%
ungroup() %>%
mutate(perc = n / sum(n)) %>%
arrange(perc) %>%
mutate(labels = scales::percent(perc))
gender_pie <- ggplot(pie_data, aes(x = "", y = perc, fill = gender)) +
geom_col() +
geom_text(aes(label = labels),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y")
ggarrange(age_hist, gender_pie,
labels = c("Age", "Gender"),
ncol = 2, nrow = 1)
# Age & Gender
par(mfrow = c(1, 2))
hs_pre <- initial_clean %>%
filter(status == "pre_connection")
# Transforming the vvariables
hs_pre$age <- as.numeric(hs_pre$age)
hs_pre$gender <- as.factor(hs_pre$gender)
# Age
age_hist <- ggplot(hs_pre %>% filter(age < 100), aes(x=age)) +
geom_histogram(color="black", fill="white") # Save histogram data
# Pie Chart
# Data transformation
pie_data <- hs_pre %>%
group_by(gender) %>% # Variable to be transformed
count() %>%
ungroup() %>%
mutate(perc = n / sum(n)) %>%
arrange(perc) %>%
mutate(labels = scales::percent(perc))
gender_pie <- ggplot(pie_data, aes(x = "", y = perc, fill = gender)) +
geom_col() +
geom_text(aes(label = labels),
# position = position_stack(vjust = 0.5)
) +
coord_polar(theta = "y")
ggarrange(age_hist, gender_pie,
labels = c("Age", "Gender"),
ncol = 2, nrow = 1)
